# Generated by Django 4.0.6 on 2024-03-01 21:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('position', models.CharField(choices=[('admin', 'admin'), ('counselor', 'counselor'), ('teacher', 'teacher')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Camper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=40)),
                ('last_name', models.CharField(max_length=20)),
                ('father_email', models.EmailField(blank=True, max_length=254)),
                ('mother_email', models.EmailField(blank=True, max_length=254)),
                ('total_points', models.IntegerField(default=0)),
                ('rank', models.CharField(default='Club Member', max_length=20)),
                ('profile_pic', models.CharField(blank=True, max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('group_type', models.CharField(choices=[('bunk', 'bunk'), ('learning_class', 'learning_class')], max_length=30)),
                ('number', models.IntegerField()),
                ('staff', models.ManyToManyField(blank=True, related_name='group', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_bunk_points', models.IntegerField()),
                ('max_bunk_bonus', models.IntegerField()),
                ('max_class_points', models.IntegerField()),
                ('max_class_bonus', models.IntegerField()),
                ('ranks', models.CharField(blank=True, max_length=120)),
                ('points_to_rank', models.CharField(blank=True, max_length=75)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('week_1', models.DateField(blank=True, null=True)),
                ('week_2', models.DateField(blank=True, null=True)),
                ('week_3', models.DateField(blank=True, null=True)),
                ('week_4', models.DateField(blank=True, null=True)),
                ('week_5', models.DateField(blank=True, null=True)),
                ('week_6', models.DateField(blank=True, null=True)),
                ('week_7', models.DateField(blank=True, null=True)),
                ('week_8', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MarkedSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('date', models.DateField(blank=True, null=True)),
                ('week', models.IntegerField(blank=True, null=True)),
                ('total', models.IntegerField(blank=True, null=True)),
                ('camper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sheet', to='points.camper')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='marked_sheet', to='points.group')),
                ('marker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sheet', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('display_name', models.CharField(blank=True, max_length=100)),
                ('task_type', models.CharField(choices=[('bunk', 'bunk'), ('learning_class', 'learning_class'), ('camper', 'camper')], max_length=30)),
                ('sequence', models.IntegerField(blank=True, null=True)),
                ('max_points', models.IntegerField(blank=True, null=True)),
                ('is_available_to_all', models.BooleanField(default=True)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task', to='points.group')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True)),
                ('text', models.TextField()),
                ('group', models.CharField(blank=True, choices=[('counselor', 'counselor'), ('teacher', 'teacher'), ('all', 'all')], max_length=20, null=True)),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reply', to='points.message')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_from', to=settings.AUTH_USER_MODEL)),
                ('to', models.ManyToManyField(related_name='message_to', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MarkedSheetLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField()),
                ('max_points', models.IntegerField()),
                ('date', models.DateField()),
                ('week', models.IntegerField()),
                ('camper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line', to='points.camper')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line', to='points.group')),
                ('sheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line', to='points.markedsheet')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line', to='points.task')),
            ],
        ),
        migrations.AddField(
            model_name='camper',
            name='new_bunk',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bunk_camper', to='points.group'),
        ),
        migrations.AddField(
            model_name='camper',
            name='new_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='class_camper', to='points.group'),
        ),
    ]
